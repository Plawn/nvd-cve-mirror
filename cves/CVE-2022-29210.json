{
  "id": "CVE-2022-29210",
  "assigner": "security-advisories@github.com",
  "Published": "2022-05-20T22:15:11.583Z",
  "Modified": "2022-06-03T00:33:09.36Z",
  "last-modified": "2022-06-03T00:33:09.36Z",
  "summary": "TensorFlow is an open source platform for machine learning. In version 2.8.0, the `TensorKey` hash function used total estimated `AllocatedBytes()`, which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. `int32_t`). It also tried to access individual tensor bytes through `tensor.data()` of size `AllocatedBytes()`. This led to ASAN failures because the `AllocatedBytes()` is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the `.data()` buffer. The discoverers could not use this byte vector anyway because types such as `tstring` include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1.",
  "access": {
    "authentication": "NONE",
    "complexity": "LOW",
    "vector": "LOCAL"
  },
  "impact": {
    "availability": "PARTIAL",
    "confidentiality": "NONE",
    "integrity": "NONE"
  },
  "cvss": 2.1,
  "exploitabilityScore": 3.9,
  "impactScore": 2.9,
  "cvss-vector": "AV:L/AC:L/Au:N/C:N/I:N/A:P",
  "references": [
    "https://github.com/tensorflow/tensorflow/blob/f3b9bf4c3c0597563b289c0512e98d4ce81f886e/tensorflow/core/framework/tensor_key.h#L53-L64",
    "https://github.com/tensorflow/tensorflow/commit/1b85a28d395dc91f4d22b5f9e1e9a22e92ccecd6",
    "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1",
    "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0",
    "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hc2f-7r5r-r2hg"
  ],
  "vulnerable_configuration": [],
  "vulnerable_product": [],
  "vendors": [],
  "products": [],
  "vulnerable_product_stems": [],
  "vulnerable_configuration_stems": [],
  "cwe": "CWE-122",
  "vulnerable_configuration_cpe_2_2": []
}